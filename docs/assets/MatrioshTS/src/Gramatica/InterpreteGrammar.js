/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var InterpreteGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,27],$V2=[1,25],$V3=[1,34],$V4=[1,26],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,22],$Vc=[1,21],$Vd=[1,23],$Ve=[1,24],$Vf=[2,5,9,27,28,31,35,40,43,44,45,49,51,52,53,54,55,63,64],$Vg=[1,48],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,50],$Vl=[1,49],$Vm=[1,56],$Vn=[1,65],$Vo=[1,64],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[2,54],$VB=[1,80],$VC=[2,5,9,27,28,31,35,37,40,43,44,45,49,51,52,53,54,55,63,64],$VD=[26,28,29,37,50,59,66,67,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,100],$VE=[1,105],$VF=[1,107],$VG=[1,106],$VH=[1,108],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[1,113],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[26,37,50,59,67,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VU=[1,131],$VV=[1,135],$VW=[1,141],$VX=[1,137],$VY=[1,138],$VZ=[1,139],$V_=[1,140],$V$=[1,149],$V01=[37,59,67],$V11=[28,36,66,76,77,78,79,80,81,82,83,84,98],$V21=[2,5,9,27,28,31,35,39,40,43,44,45,49,51,52,53,54,55,63,64],$V31=[1,180],$V41=[9,37,59],$V51=[1,186],$V61=[8,9,26,29,37,59,66],$V71=[2,5,9,27,28,31,35,36,40,43,44,45,49,51,52,53,54,55,63,64,66,76,77,78,79,80,81,82,83,84,98],$V81=[2,5,9,27,28,31,35,36,37,40,43,44,45,49,51,52,53,54,55,63,64,66,76,77,78,79,80,81,82,83,84,98],$V91=[26,37,50,59,67,75,84,85,90,91,92,93,94,95,96,97],$Va1=[26,37,50,59,67,75,84,85,86,87,90,91,92,93,94,95,96,97],$Vb1=[26,37,50,59,67,75,90,91,96,97],$Vc1=[26,37,50,59,67,75,90,91,92,93,94,95,96,97],$Vd1=[9,26,29,37,59,66],$Ve1=[1,223],$Vf1=[9,49,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"BLOQUE":7,"llaveizq":8,"llaveder":9,"FUNCION":10,"CONSOLELOG":11,"DECLARACION":12,"ASIGNACION":13,"IF":14,"TYPES":15,"FOR":16,"WHILE":17,"DOWHILE":18,"SWITCH":19,"BREAK":20,"CONTINUE":21,"RETURN":22,"INC":23,"DEC":24,"LLAMADA":25,"ptcoma":26,"pr_type":27,"identificador":28,"igual":29,"L_PARAMETROS":30,"pr_return":31,"E":32,"inc":33,"dec":34,"pr_if":35,"parizq":36,"parder":37,"ELSE":38,"pr_else":39,"pr_for":40,"FOR_D":41,"FOR_A":42,"pr_while":43,"pr_do":44,"pr_switch":45,"L_CASE":46,"DEFAULT":47,"CASE":48,"pr_case":49,"dospuntos":50,"pr_default":51,"pr_break":52,"pr_continue":53,"pr_consolelog":54,"pr_function":55,"F":56,"T":57,"TIPO":58,"coma":59,"PARAMETRO":60,"DIMENSIONES":61,"L_E":62,"pr_const":63,"pr_let":64,"L_ACCESO":65,"corizq":66,"corder":67,"pr_number":68,"pr_string":69,"pr_boolean":70,"pr_void":71,"ARITMETICA":72,"RELACIONAL":73,"LOGICA":74,"pregunta":75,"entero":76,"decimal":77,"string1":78,"string2":79,"string3":80,"pr_true":81,"pr_false":82,"pr_null":83,"menos":84,"mas":85,"por":86,"div":87,"pot":88,"mod":89,"igualque":90,"diferente":91,"mayorque":92,"mayorigual":93,"menorque":94,"menorigual":95,"and":96,"or":97,"not":98,"ACCESO":99,"punto":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"llaveizq",9:"llaveder",26:"ptcoma",27:"pr_type",28:"identificador",29:"igual",31:"pr_return",33:"inc",34:"dec",35:"pr_if",36:"parizq",37:"parder",39:"pr_else",40:"pr_for",43:"pr_while",44:"pr_do",45:"pr_switch",49:"pr_case",50:"dospuntos",51:"pr_default",52:"pr_break",53:"pr_continue",54:"pr_consolelog",55:"pr_function",59:"coma",63:"pr_const",64:"pr_let",66:"corizq",67:"corder",68:"pr_number",69:"pr_string",70:"pr_boolean",71:"pr_void",75:"pregunta",76:"entero",77:"decimal",78:"string1",79:"string2",80:"string3",81:"pr_true",82:"pr_false",83:"pr_null",84:"menos",85:"mas",86:"por",87:"div",88:"pot",89:"mod",90:"igualque",91:"diferente",92:"mayorque",93:"mayorigual",94:"menorque",95:"menorigual",96:"and",97:"or",98:"not",100:"punto"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[15,7],[22,3],[23,3],[23,2],[24,3],[24,2],[14,5],[14,6],[38,2],[38,2],[16,8],[41,1],[41,1],[42,1],[42,1],[42,1],[17,5],[18,6],[19,8],[19,7],[46,2],[46,1],[48,4],[47,3],[20,2],[21,2],[11,5],[10,4],[56,6],[56,5],[57,2],[57,0],[30,3],[30,1],[60,3],[60,4],[25,4],[25,3],[25,5],[25,4],[12,6],[12,7],[12,6],[12,7],[12,4],[12,5],[13,5],[13,4],[61,3],[61,2],[58,1],[58,1],[58,1],[58,1],[58,1],[32,1],[32,1],[32,1],[32,3],[32,5],[32,1],[32,2],[32,3],[32,4],[32,3],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[72,2],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[74,3],[74,3],[74,2],[62,3],[62,1],[65,2],[65,1],[99,3],[99,4],[99,2],[99,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Fin Jison"); this.$ = new AST($$[$0-1]);  return this.$;  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 44: case 56: case 114: case 116:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); /*this.$ = $$[$0-1];*/ 
break;
case 5:
 this.$ = new Bloque([], _$[$0-1].first_line, _$[$0-1].first_column); /*this.$ = [];*/ 
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 32: case 34: case 35: case 36: case 37: case 38: case 50: case 53: case 78: case 79: case 80:
 this.$ = $$[$0]; 
break;
case 22:
	Console.log(` Error Sintactico se recupero con ${yytext} en la posicion`,_$[$0-1].last_line,_$[$0-1].last_column); 
					//Para reportar el error compilar el archivo jison y en el .js buscar -> if (!recovering) { y pegar el codigo hasta de ultimo de ese if
					//Manager.getManager().addError(new NodoError(TipoError.SINTACTICO, `El caracter ${(this.terminals_[symbol] || symbol)} no se esperaba en esta posicion`, yyloc.last_line, yyloc.last_column));
                
break;
case 23:
 this.$ = new TypeTS($$[$0-5],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 24:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 25:
  this.$ = new Incremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 26:
  this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 27:
  this.$ = new Decremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 28:
  this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 29:
 this.$ = new If($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 30:
 this.$ = new IfElse($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 31:
 this.$ = new Else($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 33:
 this.$ = new For($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 39:
 this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 40:
 this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 41:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 42:
 this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 43: case 115:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1] 
break;
case 45:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 46:
 this.$ = new Default($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 47:
 this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 48:
 this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 49:
 this.$ = new Log($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 51:
 
		var s =  eval('$$');
		var identificador = s[s.length - 8]; /*s[s.length - 7];*/
		for(instr of $$[$0-1]){/*for(instr of $$[$0-1].instrucciones){*/
			try{
				if(instr instanceof Funcion){
					instr.padre = identificador; //Le paso el id del padre al hijo
				}
			}catch(e){
				console.log("Error al pasar el id del padre al hijo"+e);
			}
		}
		this.$ = new Funcion(identificador,null,$$[$0-5],$$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 52:
 
		var s =  eval('$$');
		var identificador = s[s.length - 7]; /*s[s.length - 6];*/
		for(instr of $$[$0-1]){/*for(instr of $$[$0-1].instrucciones){*/
			try{
				if(instr instanceof Funcion){
					instr.padre = identificador; //Le paso el id del padre al hijo
				}
			}catch(e){
				console.log("Error al pasar el id del padre al hijo"+e);
			}
		}
		this.$ = new Funcion(identificador,null,[],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);  
	
break;
case 54:
 this.$ = null;
break;
case 55: case 113:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 57:
 this.$ = new Declaracion(TipoDeclaracion.PARAM,$$[$0-2],$$[$0],0,null,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 58:
 this.$ = new Declaracion(TipoDeclaracion.PARAM,$$[$0-3],$$[$0-1],$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 59:
 this.$ = new Llamada($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 60: case 85: case 117:
 this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 61:
 this.$ = new Llamada($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 62: case 86: case 118:
 this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 63:
 this.$ = new Declaracion(TipoDeclaracion.CONST,$$[$0-4],$$[$0-3],0,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 64:
 this.$ = new Declaracion(TipoDeclaracion.CONST,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 65:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-4],$$[$0-3],0,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 66:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 67:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-2],$$[$0-1],0,null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 68:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-3],$$[$0-2],$$[$0-1],null,_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 69:
 this.$ = new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 70:
 this.$ = new Asignacion($$[$0-3],[],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 71:
 $$[$0-2] = $$[$0-2]+1; this.$=$$[$0-2] 
break;
case 72:
 this.$ = 1; 
break;
case 73:
 this.$ = Type.NUMBER; 
break;
case 74:
 this.$ = Type.STRING; 
break;
case 75:
 this.$ = Type.BOOLEAN; 
break;
case 76:
 this.$ = Type.VOID; 
break;
case 77:
 this.$ = yytext; 
break;
case 81: case 120:
 this.$ = $$[$0-1]; 
break;
case 82:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 83:
 this.$ = new Id($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 84:
 this.$ = new Acceso($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 87:
 this.$ = new ArrayTS($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 88:
 this.$ = new ArrayTS([],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 89: case 90:
 this.$ = new Literal(Number(yytext),Type.NUMBER,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 91:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING1,_$[$0].first_line,_$[$0].first_column); 
break;
case 92:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING2,_$[$0].first_line,_$[$0].first_column); 
break;
case 93:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING3,_$[$0].first_line,_$[$0].first_column); 
break;
case 94:
 this.$ = new Literal(Boolean(true),Type.BOOLEAN,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 95:
 this.$ = new Literal(Boolean(false),Type.BOOLEAN,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 96:
 this.$ = new Null(_$[$0].first_line,_$[$0].first_column); 
break;
case 97:
 this.$ = new Aritmetica(TipoOperacionAritmetica.NEGACION,null,null,$$[$0],true,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 98:
 this.$ = new Aritmetica(TipoOperacionAritmetica.SUMA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 99:
 this.$ = new Aritmetica(TipoOperacionAritmetica.RESTA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 100:
 this.$ = new Aritmetica(TipoOperacionAritmetica.MULTIPLICACION,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 101:
 this.$ = new Aritmetica(TipoOperacionAritmetica.DIVISION,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 102:
 this.$ = new Aritmetica(TipoOperacionAritmetica.POTENCIA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 103:
 this.$ = new Aritmetica(TipoOperacionAritmetica.MODULO,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 104:
 this.$ = new Relacional(TipoOperacionRelacional.IGUALQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 105:
 this.$ = new Relacional(TipoOperacionRelacional.DIFERENTE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 106:
 this.$ = new Relacional(TipoOperacionRelacional.MAYORQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 107:
 this.$ = new Relacional(TipoOperacionRelacional.MAYORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 108:
 this.$ = new Relacional(TipoOperacionRelacional.MENORQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 109:
 this.$ = new Relacional(TipoOperacionRelacional.MENORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 110:
 this.$ = new Logica(TipoOperacionLogica.AND,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 111:
 this.$ = new Logica(TipoOperacionLogica.OR,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 112:
 this.$ = new Logica(TipoOperacionLogica.NOT,null,null,$$[$0],true,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 119:
 this.$ = new Id($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},{1:[3]},{2:$V0,5:[1,35],6:36,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},o($Vf,[2,3]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),{26:[1,37]},{28:[1,38]},{36:[1,39]},{28:[1,40]},{28:[1,41]},{28:$Vg,29:$Vh,33:$Vi,34:$Vj,36:[1,46],65:42,66:$Vk,99:47,100:$Vl},{36:[1,51]},{28:[1,52]},{36:[1,53]},{36:[1,54]},{7:55,8:$Vm},{36:[1,57]},{26:[1,58]},{26:[1,59]},{28:$Vn,32:60,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,22]),{36:[1,77]},{28:$Vn,32:78,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o([29,66],$VA,{57:79,50:$VB}),o([26,29,66],$VA,{57:81,50:$VB}),{28:$Vg,29:[1,82],66:$Vk,99:83,100:$Vl},{28:$Vn,32:84,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($VC,[2,26],{26:[1,85]}),o($VC,[2,28],{26:[1,86]}),{28:$Vn,32:89,36:$Vo,37:[1,87],62:88,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($VD,[2,116]),{36:[1,90]},{28:[1,91]},{28:$Vn,32:92,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:93,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{29:[1,94]},{12:96,13:97,28:[1,98],41:95,63:$Vd,64:$Ve},{28:$Vn,32:99,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{43:[1,100]},{2:$V0,4:101,6:3,9:[1,102],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},{28:$Vn,32:103,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($Vf,[2,47]),o($Vf,[2,48]),{26:[1,104],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($VT,[2,78]),o($VT,[2,79]),o($VT,[2,80]),{28:$Vn,32:120,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($VT,[2,83],{99:47,65:121,28:$Vg,36:[1,122],66:$Vk,100:$Vl}),{28:$Vn,32:89,36:$Vo,62:123,66:$Vp,67:[1,124],72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($VT,[2,89]),o($VT,[2,90]),o($VT,[2,91]),o($VT,[2,92]),o($VT,[2,93]),o($VT,[2,94]),o($VT,[2,95]),o($VT,[2,96]),{28:$Vn,32:125,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:126,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$VU,30:128,37:[1,129],56:127,60:130},{37:[1,132],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{29:[1,133],61:134,66:$VV},{28:$VW,58:136,68:$VX,69:$VY,70:$VZ,71:$V_},{26:[1,144],29:[1,142],61:143,66:$VV},{28:$Vn,32:145,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($VD,[2,115]),{26:[1,146],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($VC,[2,25]),o($VC,[2,27]),o($Vf,[2,60],{26:[1,147]}),{37:[1,148],59:$V$},o($V01,[2,114],{75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),{28:$Vn,32:89,36:$Vo,37:[1,150],62:151,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($VD,[2,119]),{67:[1,152],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{37:[1,153],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{8:[1,154]},{28:$Vn,32:155,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($V11,[2,34]),o($V11,[2,35]),{28:$Vg,29:$Vh,65:42,66:$Vk,99:47,100:$Vl},{37:[1,156],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{36:[1,157]},{2:$V0,6:36,9:[1,158],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},o($V21,[2,5]),{37:[1,159],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($Vf,[2,24]),{28:$Vn,32:160,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:161,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:162,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:163,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:164,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:165,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:166,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:167,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:168,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:169,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:170,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:171,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:172,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:173,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{28:$Vn,32:174,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{37:[1,175],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($VT,[2,84],{99:83,28:$Vg,66:$Vk,100:$Vl}),{28:$Vn,32:89,36:$Vo,37:[1,176],62:177,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{59:$V$,67:[1,178]},o($VT,[2,88]),o($VT,[2,97]),o($VT,[2,112]),o($Vf,[2,50]),{37:[1,179],59:$V31},{8:$VA,50:$VB,57:181},o($V41,[2,56]),{50:[1,182]},{26:[1,183]},{28:$Vn,32:184,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{29:[1,185],66:$V51},{67:[1,187]},o([8,26,29,66],[2,53]),o($V61,[2,73]),o($V61,[2,74]),o($V61,[2,75]),o($V61,[2,76]),o($V61,[2,77]),{28:$Vn,32:188,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{26:[1,190],29:[1,189],66:$V51},o($V71,[2,67]),{26:[1,191],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($V81,[2,70]),o($Vf,[2,59]),o($Vf,[2,62],{26:[1,192]}),{28:$Vn,32:193,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($VD,[2,117]),{37:[1,194],59:$V$},o($VD,[2,120]),{7:195,8:$Vm},{28:$VU,30:196,60:130},{26:[1,197],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{7:198,8:$Vm},{28:$Vn,32:199,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($V21,[2,4]),{8:[1,200]},{50:[1,201],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($V91,[2,98],{86:$VH,87:$VI,88:$VJ,89:$VK}),o($V91,[2,99],{86:$VH,87:$VI,88:$VJ,89:$VK}),o($Va1,[2,100],{88:$VJ,89:$VK}),o($Va1,[2,101],{88:$VJ,89:$VK}),o($VT,[2,102]),o($VT,[2,103]),o($Vb1,[2,104],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,92:$VN,93:$VO,94:$VP,95:$VQ}),o($Vb1,[2,105],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,92:$VN,93:$VO,94:$VP,95:$VQ}),o($Vc1,[2,106],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($Vc1,[2,107],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($Vc1,[2,108],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($Vc1,[2,109],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o([26,37,50,59,67,75,96,97],[2,110],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ}),o([26,37,50,59,67,75,97],[2,111],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($VT,[2,81]),o($VT,[2,85]),{37:[1,202],59:$V$},o($VT,[2,87]),{8:$VA,50:$VB,57:203},{28:$VU,60:204},{8:[1,205]},{28:$VW,58:206,68:$VX,69:$VY,70:$VZ,71:$V_},o($Vf,[2,49]),{26:[1,207],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{28:$Vn,32:208,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},{67:[1,209]},o($Vd1,[2,72]),{26:[1,210],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{28:$Vn,32:211,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($V71,[2,68]),o($V81,[2,69]),o($Vf,[2,61]),o($V01,[2,113],{75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),o($VD,[2,118]),o($Vf,[2,29],{38:212,39:[1,213]}),{9:[1,214],59:$V31},{13:218,23:216,24:217,28:[1,219],42:215},o($Vf,[2,39]),{37:[1,220],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{46:221,48:222,49:$Ve1},{28:$Vn,32:224,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o($VT,[2,86]),{8:[1,225]},o($V41,[2,55]),{2:$V0,4:226,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},o($V41,[2,57],{61:227,66:$VV}),o($V71,[2,63]),{26:[1,228],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($Vd1,[2,71]),o($V71,[2,65]),{26:[1,229],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($Vf,[2,30]),{7:230,8:$Vm,14:231,35:$V4},{26:[1,232]},{37:[1,233]},{37:[2,36]},{37:[2,37]},{37:[2,38]},{28:$Vg,29:$Vh,33:$Vi,34:$Vj,65:42,66:$Vk,99:47,100:$Vl},o($Vf,[2,40]),{9:[1,235],47:234,48:236,49:$Ve1,51:[1,237]},o($Vf1,[2,44]),{28:$Vn,32:238,36:$Vo,66:$Vp,72:61,73:62,74:63,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,98:$Vz},o([26,37,50,59,67,75],[2,82],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),{2:$V0,4:239,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},{2:$V0,6:36,9:[1,240],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},o($V41,[2,58],{66:$V51}),o($V71,[2,64]),o($V71,[2,66]),o($Vf,[2,31]),o($Vf,[2,32]),o($Vf,[2,23]),{7:241,8:$Vm},{9:[1,242]},o($Vf,[2,42]),o($Vf1,[2,43]),{50:[1,243]},{50:[1,244],75:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{2:$V0,6:36,9:[1,245],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},o($Vf,[2,52]),o($Vf,[2,33]),o($Vf,[2,41]),{2:$V0,4:246,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},{2:$V0,4:247,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},o($Vf,[2,51]),{2:$V0,6:36,9:[2,46],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve},o($Vf1,[2,45],{10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,6:36,2:$V0,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,63:$Vd,64:$Ve})],
defaultActions: {35:[2,1],216:[2,36],217:[2,37],218:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            Manager.getManager().addError(new NodoError(TipoError.SINTACTICO, `El caracter ${(this.terminals_[symbol] || symbol)} no se esperaba en esta posicion`, yyloc.last_line, yyloc.last_column));
               
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	/*
	
	const {AST} = require('../TypeScript/Interpreter/Abstract/AST');

	const {Acceso,TipoAcceso} = require('../TypeScript/Interpreter/Expresion/Acceso');
	const {Aritmetica,TipoOperacionAritmetica} = require('../TypeScript/Interpreter/Expresion/Aritmetica');
	const {Relacional,TipoOperacionRelacional} = require('../TypeScript/Interpreter/Expresion/Relacional');
	const {Logica,TipoOperacionLogica} = require('../TypeScript/Interpreter/Expresion/Logica');
	const {Literal,TipoString} = require('../TypeScript/Interpreter/Expresion/Literal');
	const {Id} = require('../TypeScript/Interpreter/Expresion/Id');
	const {Ternario} = require('../TypeScript/Interpreter/Expresion/Ternario');
	const {Null} = require('../TypeScript/Interpreter/Expresion/Null');

	const {Bloque} = require('../TypeScript/Interpreter/Instruccion/Bloque');
	const {Funcion} = require('../TypeScript/Interpreter/Instruccion/Funcion');
	const {Llamada} = require('../TypeScript/Interpreter/Instruccion/Llamada');
	//const {If_Old,TipoIf} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/If_Old');
	const {If} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/If');
	const {IfElse} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/IfElse');
	const {Else} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Else');
	const {While} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/While');
	const {DoWhile} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/DoWhile');
	const {Declaracion,TipoDeclaracion} = require('../TypeScript/Interpreter/Instruccion/Declaracion');
	const {Asignacion} = require('../TypeScript/Interpreter/Instruccion/Asignacion');
	const {For} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/For');

	const {Switch} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Switch');
	const {Case} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Case');
	const {Default} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Default');

	const {ArrayTS} = require('../TypeScript/Interpreter/Edd/ArrayTS');
	const {TypeTS} = require('../TypeScript/Interpreter/Edd/TypeTS');

	const {Log} = require('../TypeScript/Interpreter/FuncionesNativas/Log');
	const {Incremento} = require('../TypeScript/Interpreter/FuncionesNativas/Incremento');
	const {Decremento} = require('../TypeScript/Interpreter/FuncionesNativas/Decremento');

	const {Manager} = require('../TypeScript/Interpreter/Reportes/Manager');
	const {NodoError,TipoError} = require('../TypeScript/Interpreter/Reportes/NodoError');

	const {Type} = require('../TypeScript/Interpreter/TablaSimbolos/Tipo');

	const {Return} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Return');
	const {Break} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Break');
	const {Continue} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Continue');

    /*	
	const LlamadaE = require('../JavaScript/Expresion/LlamadaE');
	const Acceso = require('../JavaScript/Expresion/Acceso');
	
	const LlamadaI = require('../JavaScript/Instruccion/LlamadaI');
    */

	//Manager.Manager.getManager().reiniciar(); 
	//Manager.Manager.getManager().agregarC3D("hola mundo");
	//const ErrorManager = require('../JavaScript/Reportes/ErrorManager');
    //let er = new ErrorManager.ErrorManager(); 
	//er.addError(new NodoError.NodoError(NodoError.TipoError.SEMANTICO, `No es posible la suma entre los tipos ${1} y ${1}`, 1, 1, "this.archivo"));
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 54;
break;
case 4:return 64;
break;
case 5:return 63;
break;
case 6:return 81;
break;
case 7:return 82;
break;
case 8:return 83; 
break;
case 9:return 68; 
break;
case 10:return 69;
break;
case 11:return 70;
break;
case 12:return 71;
break;
case 13:return 27;
break;
case 14:return 55;
break;
case 15:return 35;
break;
case 16:return 39;
break;
case 17:return 45;
break;
case 18:return 49;
break;
case 19:return 51;
break;
case 20:return 52;
break;
case 21:return 53;
break;
case 22:return 40;
break;
case 23:return 43;
break;
case 24:return 44;
break;
case 25:return 31; 
break;
case 26:return 27;
break;
case 27:return 33;
break;
case 28:return 85;
break;
case 29:return 34; 
break;
case 30:return 84; 
break;
case 31:return 88; 
break;
case 32:return 86;
break;
case 33:return 87;
break;
case 34:return 89; 
break;
case 35:return 90;
break;
case 36:return 91;
break;
case 37:return 93; 
break;
case 38:return 92;
break;
case 39:return 95; 
break;
case 40:return 94;
break;
case 41:return 100;
break;
case 42:return 59;
break;
case 43:return 'dospuntosigual';
break;
case 44:return 50;
break;
case 45:return 26;
break;
case 46:return 66;
break;
case 47:return 67;
break;
case 48:return 36;
break;
case 49:return 37;
break;
case 50:return 8;
break;
case 51:return 9;
break;
case 52:return 29;
break;
case 53:return 75;
break;
case 54:return 96;
break;
case 55:return 97;
break;
case 56:return 98;
break;
case 57: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad1 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad1 = cad1.replace("\\","\\");
                            cad1 = cad1.replace("\\n","\n");
                            cad1 = cad1.replace("\\r","\r");
                            cad1 = cad1.replace("\\t","\t");
							yy_.yytext = cad1;
						return 78; 
break;
case 58: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad2 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad2 = cad2.replace("\\","\\");
                            cad2 = cad2.replace("\\n","\n");
                            cad2 = cad2.replace("\\r","\r");
                            cad2 = cad2.replace("\\t","\t");
							yy_.yytext = cad2;
						return 79; 
break;
case 59: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad3 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad3 = cad3.replace("\\","\\");
                            cad3 = cad3.replace("\\n","\n");
                            cad3 = cad3.replace("\\r","\r");
                            cad3 = cad3.replace("\\t","\t");
							yy_.yytext = cad3;
						return 80; 
break;
case 60:return 77;
break;
case 61:return 76;
break;
case 62:return 28;
break;
case 63:return 5; 
break;
case 64: 	Manager.getManager().addError(new NodoError(TipoError.LEXICO, `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column));
							//er.addError(new NodoError.NodoError(NodoError.TipoError.LEXICO, `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column, "this.archivo"));
    						//console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:console\.log\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:type\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:\.)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:"[^\"]*")/,/^(?:[\'][^\']*[\'])/,/^(?:[\`][^\`]*[\`])/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_.]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = InterpreteGrammar;
exports.Parser = InterpreteGrammar.Parser;
exports.parse = function () { return InterpreteGrammar.parse.apply(InterpreteGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}