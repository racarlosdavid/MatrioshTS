/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var InterpreteGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,31],$V2=[1,29],$V3=[1,38],$V4=[1,30],$V5=[1,32],$V6=[1,28],$V7=[1,27],$V8=[1,33],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[1,26],$Ve=[1,25],$Vf=[2,5,9,31,32,35,39,44,45,47,51,52,53,57,59,60,61,62,65],$Vg=[1,45],$Vh=[1,54],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,55],$Vm=[1,61],$Vn=[1,73],$Vo=[1,71],$Vp=[1,70],$Vq=[1,72],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[2,67],$VC=[1,89],$VD=[1,88],$VE=[30,33,58,73,79],$VF=[2,90],$VG=[1,93],$VH=[2,5,9,31,32,35,39,41,44,45,47,51,52,53,57,59,60,61,62,65],$VI=[1,101],$VJ=[9,30,32,33,41,58,73,74,79,80,88,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$VK=[1,118],$VL=[1,120],$VM=[1,119],$VN=[1,121],$VO=[1,122],$VP=[1,123],$VQ=[1,124],$VR=[1,125],$VS=[1,126],$VT=[1,127],$VU=[1,128],$VV=[1,129],$VW=[1,130],$VX=[1,131],$VY=[1,132],$VZ=[9,30,41,58,73,80,88,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$V_=[1,141],$V$=[1,148],$V01=[1,150],$V11=[41,73,80],$V21=[1,153],$V31=[1,160],$V41=[1,156],$V51=[1,157],$V61=[1,158],$V71=[1,159],$V81=[2,80],$V91=[1,167],$Va1=[8,32,40,79,90,91,92,93,94,95,96,97,98,112],$Vb1=[2,5,9,31,32,35,39,43,44,45,47,51,52,53,57,59,60,61,62,65],$Vc1=[9,73],$Vd1=[8,79],$Ve1=[41,73],$Vf1=[1,215],$Vg1=[8,9,30,32,33,41,73,79],$Vh1=[2,5,8,9,31,32,35,39,40,44,45,47,51,52,53,57,59,60,61,62,65,79,90,91,92,93,94,95,96,97,98,112],$Vi1=[2,5,8,9,31,32,35,39,40,41,44,45,47,51,52,53,57,59,60,61,62,65,79,90,91,92,93,94,95,96,97,98,112],$Vj1=[9,30,41,58,73,80,88,98,99,104,105,106,107,108,109,110,111],$Vk1=[9,30,41,58,73,80,88,98,99,100,101,104,105,106,107,108,109,110,111],$Vl1=[9,30,41,58,73,80,88,104,105,110,111],$Vm1=[9,30,41,58,73,80,88,104,105,106,107,108,109,110,111],$Vn1=[9,32],$Vo1=[2,72],$Vp1=[1,260],$Vq1=[1,259],$Vr1=[1,273],$Vs1=[9,30,32,41,73],$Vt1=[9,57,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"BLOQUE":7,"llaveizq":8,"llaveder":9,"FUNCION":10,"CONSOLELOG":11,"DECLARACION":12,"ASIGNACION":13,"IF":14,"TYPES":15,"FOR":16,"FOR_IN":17,"FOR_OF":18,"WHILE":19,"DOWHILE":20,"SWITCH":21,"BREAK":22,"CONTINUE":23,"RETURN":24,"INC":25,"DEC":26,"LLAMADA":27,"PUSH":28,"POP":29,"ptcoma":30,"pr_type":31,"identificador":32,"igual":33,"TYPE_L_PARAM":34,"pr_return":35,"E":36,"inc":37,"dec":38,"pr_if":39,"parizq":40,"parder":41,"ELSE":42,"pr_else":43,"pr_for":44,"pr_let":45,"pr_in":46,"pr_const":47,"pr_of":48,"FOR_D":49,"FOR_A":50,"pr_while":51,"pr_do":52,"pr_switch":53,"L_CASE":54,"DEFAULT":55,"CASE":56,"pr_case":57,"dospuntos":58,"pr_default":59,"pr_break":60,"pr_continue":61,"pr_consolelog":62,"L_E":63,"PTC":64,"pr_function":65,"F":66,"L_PARAMETROS":67,"T":68,"DIMENSIONES":69,"TIPO":70,"PARAMETRO":71,"SEPARADOR":72,"coma":73,"punto":74,"pr_pop":75,"pr_push":76,"L_ID":77,"L_ACCESO":78,"corizq":79,"corder":80,"pr_number":81,"pr_string":82,"pr_boolean":83,"pr_void":84,"ARITMETICA":85,"RELACIONAL":86,"LOGICA":87,"pregunta":88,"L_E_TYPE":89,"entero":90,"decimal":91,"string1":92,"string2":93,"string3":94,"pr_true":95,"pr_false":96,"pr_null":97,"menos":98,"mas":99,"por":100,"div":101,"pot":102,"mod":103,"igualque":104,"diferente":105,"mayorque":106,"mayorigual":107,"menorque":108,"menorigual":109,"and":110,"or":111,"not":112,"E_TYPE":113,"ACCESO":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"llaveizq",9:"llaveder",30:"ptcoma",31:"pr_type",32:"identificador",33:"igual",35:"pr_return",37:"inc",38:"dec",39:"pr_if",40:"parizq",41:"parder",43:"pr_else",44:"pr_for",45:"pr_let",46:"pr_in",47:"pr_const",48:"pr_of",51:"pr_while",52:"pr_do",53:"pr_switch",57:"pr_case",58:"dospuntos",59:"pr_default",60:"pr_break",61:"pr_continue",62:"pr_consolelog",65:"pr_function",73:"coma",74:"punto",75:"pr_pop",76:"pr_push",79:"corizq",80:"corder",81:"pr_number",82:"pr_string",83:"pr_boolean",84:"pr_void",88:"pregunta",90:"entero",91:"decimal",92:"string1",93:"string2",94:"string3",95:"pr_true",96:"pr_false",97:"pr_null",98:"menos",99:"mas",100:"por",101:"div",102:"pot",103:"mod",104:"igualque",105:"diferente",106:"mayorque",107:"mayorigual",108:"menorque",109:"menorigual",110:"and",111:"or",112:"not"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[15,7],[15,6],[24,3],[24,2],[25,3],[25,2],[26,3],[26,2],[14,5],[14,6],[42,2],[42,2],[17,8],[17,8],[18,8],[18,8],[16,8],[49,1],[49,1],[50,1],[50,1],[50,1],[19,5],[20,6],[20,7],[21,8],[21,7],[54,2],[54,1],[56,4],[55,3],[22,2],[23,2],[11,5],[10,4],[66,6],[66,7],[66,5],[66,6],[68,2],[68,0],[34,3],[34,2],[72,1],[72,1],[72,0],[67,3],[67,1],[71,3],[71,4],[27,4],[27,5],[64,1],[64,0],[29,6],[28,7],[12,6],[12,7],[12,6],[12,7],[12,4],[12,5],[77,3],[77,1],[13,5],[13,4],[69,3],[69,2],[70,1],[70,1],[70,1],[70,1],[70,1],[36,1],[36,1],[36,1],[36,3],[36,5],[36,1],[36,2],[36,3],[36,4],[36,5],[36,6],[36,3],[36,2],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[85,2],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[87,3],[87,3],[87,2],[63,3],[63,1],[89,3],[89,1],[113,3],[78,2],[78,1],[114,3],[114,4],[114,2],[114,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Fin Jison"); this.$ = new AST($$[$0-1]);  return this.$;  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 55: case 74: case 90: case 139: case 141: case 144:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); /*this.$ = $$[$0-1];*/ 
break;
case 5:
 this.$ = new Bloque([], _$[$0-1].first_line, _$[$0-1].first_column); /*this.$ = [];*/ 
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 38: case 44: case 45: case 46: case 47: case 48: case 61: case 66: case 100: case 101: case 102:
 this.$ = $$[$0]; 
break;
case 26:
	Console.log(` Error Sintactico se recupero con ${yytext} en la posicion`,_$[$0-1].last_line,_$[$0-1].last_column,"global"); 
					//Para reportar el error compilar el archivo jison y en el .js buscar -> if (!recovering) { y pegar el codigo hasta de ultimo de ese if
					//Manager.getManager().addError(new NodoError(TipoError.SINTACTICO, `El caracter ${(this.terminals_[symbol] || symbol)} no se esperaba en esta posicion`, yyloc.last_line, yyloc.last_column,"global"));
                
break;
case 27:
 this.$ = new TypeTS($$[$0-5],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 28:
 this.$ = new TypeTS($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 29:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 30:
 this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 31:
  this.$ = new Incremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 32:
  this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 33:
  this.$ = new Decremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 34:
  this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 35:
 this.$ = new If($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 36:
 this.$ = new IfElse($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 37:
 this.$ = new Else($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 39:
 this.$ = new ForIn(TipoDeclaracion.LET,$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 40:
 this.$ = new ForIn(TipoDeclaracion.CONST,$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 41:
 this.$ = new ForOf(TipoDeclaracion.LET,$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 42:
 this.$ = new ForOf(TipoDeclaracion.CONST,$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 43:
 this.$ = new For($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 49:
 this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 50:
 this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 51:
 this.$ = new DoWhile($$[$0-5],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 52:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 53:
 this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 54: case 143:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1] 
break;
case 56:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 57:
 this.$ = new Default($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 58:
 this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 59:
 this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 60:
 this.$ = new Log($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 62:
 
		var s =  eval('$$');
		var identificador = s[s.length - 8]; /*s[s.length - 7];*/
		for(instr of $$[$0-1]){/*for(instr of $$[$0-1].instrucciones){*/
			try{
				if(instr instanceof Funcion){
					instr.padre = identificador; //Le paso el id del padre al hijo
				}
			}catch(e){
				console.log("Error al pasar el id del padre al hijo"+e);
			}
		}
		this.$ = new Funcion(identificador,null,$$[$0-5],$$[$0-3],0,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 63:
 
		var s =  eval('$$');
		var identificador = s[s.length - 9]; /*s[s.length - 7];*/
		for(instr of $$[$0-1]){/*for(instr of $$[$0-2].instrucciones){*/
			try{
				if(instr instanceof Funcion){
					instr.padre = identificador; //Le paso el id del padre al hijo
				}
			}catch(e){
				console.log("Error al pasar el id del padre al hijo"+e);
			}
		}
		this.$ = new Funcion(identificador,null,$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 64:
 
		var s =  eval('$$');
		var identificador = s[s.length - 7]; /*s[s.length - 6];*/
		for(instr of $$[$0-1]){/*for(instr of $$[$0-1].instrucciones){*/
			try{
				if(instr instanceof Funcion){
					instr.padre = identificador; //Le paso el id del padre al hijo
				}
			}catch(e){
				console.log("Error al pasar el id del padre al hijo"+e);
			}
		}
		this.$ = new Funcion(identificador,null,[],$$[$0-3],0,$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);  
	
break;
case 65:
 
		var s =  eval('$$');
		var identificador = s[s.length - 8]; /*s[s.length - 6];*/
		for(instr of $$[$0-1]){/*for(instr of $$[$0-2].instrucciones){*/
			try{
				if(instr instanceof Funcion){
					instr.padre = identificador; //Le paso el id del padre al hijo
				}
			}catch(e){
				console.log("Error al pasar el id del padre al hijo"+e);
			}
		}
		this.$ = new Funcion(identificador,null,[],$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);  
	
break;
case 67:
 this.$ = null;
break;
case 68:
 $$[$0-2].push($$[$0-1]); this.$=$$[$0-2]; 
break;
case 69:
 this.$ = [$$[$0-1]]; 
break;
case 73: case 89: case 138: case 140:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 75:
 this.$ = new Declaracion(TipoDeclaracion.PARAM,[$$[$0-2]],$$[$0],0,null,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 76:
 this.$ = new Declaracion(TipoDeclaracion.PARAM,[$$[$0-3]],$$[$0-1],$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 77:
 this.$ = new Llamada($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 78:
 this.$ = new Llamada($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 81:
 this.$ = new Pop($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 82:
 this.$ = new Push($$[$0-6],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 83:
 this.$ = new Declaracion(TipoDeclaracion.CONST,$$[$0-4],$$[$0-3],0,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 84:
 this.$ = new Declaracion(TipoDeclaracion.CONST,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 85:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-4],$$[$0-3],0,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 86:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 87:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-2],$$[$0-1],0,null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 88:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-3],$$[$0-2],$$[$0-1],null,_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 91:
 this.$ = new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 92:
 this.$ = new Asignacion($$[$0-3],[],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 93:
 $$[$0-2] = $$[$0-2]+1; this.$=$$[$0-2] 
break;
case 94:
 this.$ = 1; 
break;
case 95:
 this.$ = Type.NUMBER; 
break;
case 96:
 this.$ = Type.STRING; 
break;
case 97:
 this.$ = Type.BOOLEAN; 
break;
case 98:
 this.$ = Type.VOID; 
break;
case 99:
 this.$ = yytext; 
break;
case 103:
 this.$ = $$[$0-1]; 
break;
case 104:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 105:
 this.$ = new Id($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 106:
 this.$ = new Acceso($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 107: case 145:
 this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 108: case 146:
 this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 109:
 this.$ = new Pop($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 110:
 this.$ = new Push($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 111:
 this.$ = new ArrayTS($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 112:
 this.$ = new ArrayTS([],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 113:
 this.$ = new TypeTSDefinicion($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 114: case 115:
 this.$ = new Literal(Number(yytext),Type.NUMBER,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 116:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING1,_$[$0].first_line,_$[$0].first_column); 
break;
case 117:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING2,_$[$0].first_line,_$[$0].first_column); 
break;
case 118:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING3,_$[$0].first_line,_$[$0].first_column); 
break;
case 119:
 this.$ = new Literal(Boolean(true),Type.BOOLEAN,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 120:
 this.$ = new Literal(Boolean(false),Type.BOOLEAN,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 121:
 this.$ = new Null(_$[$0].first_line,_$[$0].first_column); 
break;
case 122:
 this.$ = new Aritmetica(TipoOperacionAritmetica.NEGACION,null,null,$$[$0],true,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 123:
 this.$ = new Aritmetica(TipoOperacionAritmetica.SUMA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 124:
 this.$ = new Aritmetica(TipoOperacionAritmetica.RESTA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 125:
 this.$ = new Aritmetica(TipoOperacionAritmetica.MULTIPLICACION,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 126:
 this.$ = new Aritmetica(TipoOperacionAritmetica.DIVISION,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 127:
 this.$ = new Aritmetica(TipoOperacionAritmetica.POTENCIA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 128:
 this.$ = new Aritmetica(TipoOperacionAritmetica.MODULO,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 129:
 this.$ = new Relacional(TipoOperacionRelacional.IGUALQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 130:
 this.$ = new Relacional(TipoOperacionRelacional.DIFERENTE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 131:
 this.$ = new Relacional(TipoOperacionRelacional.MAYORQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 132:
 this.$ = new Relacional(TipoOperacionRelacional.MAYORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 133:
 this.$ = new Relacional(TipoOperacionRelacional.MENORQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 134:
 this.$ = new Relacional(TipoOperacionRelacional.MENORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 135:
 this.$ = new Logica(TipoOperacionLogica.AND,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 136:
 this.$ = new Logica(TipoOperacionLogica.OR,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 137:
 this.$ = new Logica(TipoOperacionLogica.NOT,null,null,$$[$0],true,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 142:
 this.$ = new Declaracion(TipoDeclaracion.TYPEVAL,[$$[$0-2]],null,0,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 147:
 this.$ = new Id($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 148:
 this.$ = new Dimension($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},{1:[3]},{2:$V0,5:[1,39],6:40,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},o($Vf,[2,3]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),o($Vf,[2,25]),{30:[1,41]},{32:[1,42]},{40:[1,43]},{32:$Vg,77:44},{32:$Vg,77:46},{32:$Vh,33:$Vi,37:$Vj,38:$Vk,40:[1,51],74:[1,52],78:47,79:$Vl,114:53},{40:[1,56]},{32:[1,57]},{40:[1,58]},{40:[1,59]},{7:60,8:$Vm},{40:[1,62]},{30:[1,63]},{30:[1,64]},{8:$Vn,30:[1,66],32:$Vo,36:65,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,26]),{40:[1,84]},{8:$Vn,32:$Vo,36:86,40:$Vp,63:85,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o([33,79],$VB,{68:87,58:$VC,73:$VD}),o($VE,$VF),o([30,33,79],$VB,{68:90,58:$VC,73:$VD}),{32:$Vh,33:[1,91],74:$VG,79:$Vl,114:92},{8:$Vn,32:$Vo,36:94,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($VH,[2,32],{30:[1,95]}),o($VH,[2,34],{30:[1,96]}),{8:$Vn,32:$Vo,36:86,40:$Vp,41:[1,97],63:98,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{32:$VI,75:[1,100],76:[1,99]},o($VJ,[2,144]),{40:[1,102]},{8:$Vn,32:$Vo,36:103,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:104,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{33:[1,105]},{12:109,13:110,32:[1,111],45:[1,107],47:[1,108],49:106},{8:$Vn,32:$Vo,36:112,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{51:[1,113]},{2:$V0,4:114,6:3,9:[1,115],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},{8:$Vn,32:$Vo,36:116,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($Vf,[2,58]),o($Vf,[2,59]),{30:[1,117],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($Vf,[2,30]),o($VZ,[2,100]),o($VZ,[2,101]),o($VZ,[2,102]),{8:$Vn,32:$Vo,36:133,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($VZ,[2,105],{114:53,78:134,32:$Vh,40:[1,135],74:[1,136],79:$Vl}),{8:$Vn,32:$Vo,36:86,40:$Vp,63:137,79:$Vq,80:[1,138],85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{32:$V_,89:139,113:140},o($VZ,[2,114]),o($VZ,[2,115]),o($VZ,[2,116]),o($VZ,[2,117]),o($VZ,[2,118]),o($VZ,[2,119]),o($VZ,[2,120]),o($VZ,[2,121]),{8:$Vn,32:$Vo,36:142,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:143,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{32:$V$,41:[1,146],66:144,67:145,71:147},{41:[1,149],73:$V01},o($V11,[2,139],{88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY}),{33:[1,151],69:152,79:$V21},{32:[1,154]},{32:$V31,70:155,81:$V41,82:$V51,83:$V61,84:$V71},{30:[1,163],33:[1,161],69:162,79:$V21},{8:$Vn,32:$Vo,36:164,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($VJ,[2,143]),{32:$VI},{30:[1,165],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($VH,[2,31]),o($VH,[2,33]),o($Vf,$V81,{64:166,30:$V91}),{41:[1,168],73:$V01},{40:[1,169]},{40:[1,170]},o($VJ,[2,147]),{8:$Vn,32:$Vo,36:86,40:$Vp,41:[1,171],63:172,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{80:[1,173],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{41:[1,174],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{8:[1,175]},{8:$Vn,32:$Vo,36:176,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{32:[1,177],77:46},{32:[1,178],77:44},o($Va1,[2,44]),o($Va1,[2,45]),{32:$Vh,33:$Vi,74:$VG,78:47,79:$Vl,114:53},{41:[1,179],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{40:[1,180]},{2:$V0,6:40,9:[1,181],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},o($Vb1,[2,5]),{41:[1,182],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($Vf,[2,29]),{8:$Vn,32:$Vo,36:183,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:184,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:185,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:186,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:187,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:188,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:189,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:190,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:191,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:192,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:193,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:194,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:195,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:196,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:197,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{41:[1,198],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($VZ,[2,106],{114:92,32:$Vh,74:$VG,79:$Vl}),{8:$Vn,32:$Vo,36:86,40:$Vp,41:[1,199],63:200,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{32:$VI,75:[1,201],76:[1,202]},{73:$V01,80:[1,203]},o($VZ,[2,112]),{9:[1,204],73:[1,205]},o($Vc1,[2,141]),{58:[1,206]},o($VZ,[2,122]),o($VZ,[2,137]),o($Vf,[2,61]),{41:[1,207],73:[1,208]},o($Vd1,$VB,{68:209,58:$VC}),o($Ve1,[2,74]),{58:[1,210]},o($Vf,$V81,{64:211,30:$V91}),{8:$Vn,32:$Vo,36:212,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:213,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{33:[1,214],79:$Vf1},{80:[1,216]},o($VE,[2,89]),o([8,30,33,79],[2,66]),o($Vg1,[2,95]),o($Vg1,[2,96]),o($Vg1,[2,97]),o($Vg1,[2,98]),o($Vg1,[2,99]),{8:$Vn,32:$Vo,36:217,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{30:[1,219],33:[1,218],79:$Vf1},o($Vh1,[2,87]),{30:[1,220],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($Vi1,[2,92]),o($Vf,[2,77]),o($Vf,[2,79]),o($Vf,$V81,{64:221,30:$V91}),{8:$Vn,32:$Vo,36:222,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{41:[1,223]},o($VJ,[2,145]),{41:[1,224],73:$V01},o($VJ,[2,148]),{7:225,8:$Vm},{32:$V$,34:226,71:227},{30:[1,228],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($VE,$VF,{46:[1,229],48:[1,230]}),o([33,58,73,79],$VF,{46:[1,231],48:[1,232]}),{7:233,8:$Vm},{8:$Vn,32:$Vo,36:234,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($Vb1,[2,4]),{8:[1,235]},{58:[1,236],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($Vj1,[2,123],{100:$VN,101:$VO,102:$VP,103:$VQ}),o($Vj1,[2,124],{100:$VN,101:$VO,102:$VP,103:$VQ}),o($Vk1,[2,125],{102:$VP,103:$VQ}),o($Vk1,[2,126],{102:$VP,103:$VQ}),o($VZ,[2,127]),o($VZ,[2,128]),o($Vl1,[2,129],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,106:$VT,107:$VU,108:$VV,109:$VW}),o($Vl1,[2,130],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,106:$VT,107:$VU,108:$VV,109:$VW}),o($Vm1,[2,131],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ}),o($Vm1,[2,132],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ}),o($Vm1,[2,133],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ}),o($Vm1,[2,134],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ}),o([9,30,41,58,73,80,88,110,111],[2,135],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW}),o([9,30,41,58,73,80,88,111],[2,136],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX}),o($VZ,[2,103]),o($VZ,[2,107]),{41:[1,237],73:$V01},{40:[1,238]},{40:[1,239]},o($VZ,[2,111]),o($VZ,[2,113]),{32:$V_,113:240},{8:$Vn,32:$Vo,36:241,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($Vd1,$VB,{68:242,58:$VC}),{32:$V$,71:243},{8:[1,244],69:245,79:$V21},{32:$V31,70:246,81:$V41,82:$V51,83:$V61,84:$V71},o($Vf,[2,60]),o($V11,[2,138],{88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY}),{30:[1,247],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{8:$Vn,32:$Vo,36:248,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{80:[1,249]},o($Vg1,[2,94]),{30:[1,250],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{8:$Vn,32:$Vo,36:251,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($Vh1,[2,88]),o($Vi1,[2,91]),o($Vf,[2,78]),{41:[1,252],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($Vf,$V81,{64:253,30:$V91}),o($VJ,[2,146]),o($Vf,[2,35],{42:254,43:[1,255]}),{9:[1,256],32:$V$,71:257},o($Vn1,$Vo1,{72:258,30:$Vp1,73:$Vq1}),{13:264,25:262,26:263,32:[1,265],50:261},{8:$Vn,32:$Vo,36:266,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:267,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:268,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},{8:$Vn,32:$Vo,36:269,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($Vf,[2,49]),{41:[1,270],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{54:271,56:272,57:$Vr1},{8:$Vn,32:$Vo,36:274,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($VZ,[2,108]),{41:[1,275]},{8:$Vn,32:$Vo,36:276,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o($Vc1,[2,140]),o($Vc1,[2,142],{88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY}),{8:[1,277],69:278,79:$V21},o($Ve1,[2,73]),{2:$V0,4:279,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},{8:[1,280],79:$Vf1},o($Vs1,[2,75],{69:281,79:$V21}),o($Vh1,[2,83]),{30:[1,282],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($Vg1,[2,93]),o($Vh1,[2,85]),{30:[1,283],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($Vf,$V81,{64:284,30:$V91}),o($Vf,[2,81]),o($Vf,[2,36]),{7:285,8:$Vm,14:286,39:$V4},o($Vf,[2,28],{30:[1,287]}),o($Vn1,$Vo1,{72:288,30:$Vp1,73:$Vq1}),o($Vn1,[2,69]),o($Vn1,[2,70]),o($Vn1,[2,71]),{41:[1,289]},{41:[2,46]},{41:[2,47]},{41:[2,48]},{32:$Vh,33:$Vi,37:$Vj,38:$Vk,74:$VG,78:47,79:$Vl,114:53},{41:[1,290],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{41:[1,291],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{41:[1,292],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{41:[1,293],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($Vf,[2,50],{30:[1,294]}),{9:[1,296],55:295,56:297,57:$Vr1,59:[1,298]},o($Vt1,[2,55]),{8:$Vn,32:$Vo,36:299,40:$Vp,79:$Vq,85:67,86:68,87:69,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,112:$VA},o([9,30,41,58,73,80,88],[2,104],{98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY}),o($VZ,[2,109]),{41:[1,300],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},{2:$V0,4:301,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},{8:[1,302],79:$Vf1},{2:$V0,6:40,9:[1,303],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},{2:$V0,4:304,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},o($Vs1,[2,76],{79:$Vf1}),o($Vh1,[2,84]),o($Vh1,[2,86]),o($Vf,[2,82]),o($Vf,[2,37]),o($Vf,[2,38]),o($Vf,[2,27]),o($Vn1,[2,68]),{7:305,8:$Vm},{7:306,8:$Vm},{7:307,8:$Vm},{7:308,8:$Vm},{7:309,8:$Vm},o($Vf,[2,51]),{9:[1,310]},o($Vf,[2,53]),o($Vt1,[2,54]),{58:[1,311]},{58:[1,312],88:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$VU,108:$VV,109:$VW,110:$VX,111:$VY},o($VZ,[2,110]),{2:$V0,6:40,9:[1,313],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},{2:$V0,4:314,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},o($Vf,[2,64]),{2:$V0,6:40,9:[1,315],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},o($Vf,[2,43]),o($Vf,[2,39]),o($Vf,[2,41]),o($Vf,[2,40]),o($Vf,[2,42]),o($Vf,[2,52]),{2:$V0,4:316,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},{2:$V0,4:317,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},o($Vf,[2,62]),{2:$V0,6:40,9:[1,318],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},o($Vf,[2,65]),{2:$V0,6:40,9:[2,57],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve},o($Vt1,[2,56],{10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,6:40,2:$V0,31:$V1,32:$V2,35:$V3,39:$V4,44:$V5,45:$V6,47:$V7,51:$V8,52:$V9,53:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve}),o($Vf,[2,63])],
defaultActions: {39:[2,1],262:[2,46],263:[2,47],264:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
                Manager.getManager().addError(new NodoError(TipoError.SINTACTICO, `El caracter ${(this.terminals_[symbol] || symbol)} no se esperaba en esta posicion`, yyloc.last_line, yyloc.last_column,"global"));
               
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
	/*
	const {AST} = require('../TypeScript/Interpreter/Abstract/AST');

	const {Acceso,TipoAcceso} = require('../TypeScript/Interpreter/Expresion/Acceso');
	const {Aritmetica,TipoOperacionAritmetica} = require('../TypeScript/Interpreter/Expresion/Aritmetica');
	const {Relacional,TipoOperacionRelacional} = require('../TypeScript/Interpreter/Expresion/Relacional');
	const {Logica,TipoOperacionLogica} = require('../TypeScript/Interpreter/Expresion/Logica');
	const {Literal,TipoString} = require('../TypeScript/Interpreter/Expresion/Literal');
	const {Id} = require('../TypeScript/Interpreter/Expresion/Id');
	const {Dimension} = require('../TypeScript/Interpreter/Expresion/Dimension');
	const {Ternario} = require('../TypeScript/Interpreter/Expresion/Ternario');
	const {Null} = require('../TypeScript/Interpreter/Expresion/Null');

	const {Bloque} = require('../TypeScript/Interpreter/Instruccion/Bloque');
	const {Funcion} = require('../TypeScript/Interpreter/Instruccion/Funcion');
	const {Llamada} = require('../TypeScript/Interpreter/Instruccion/Llamada');
	const {If} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/If');
	const {IfElse} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/IfElse');
	const {Else} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Else');
	const {While} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/While');
	const {DoWhile} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/DoWhile');
	const {Declaracion,TipoDeclaracion} = require('../TypeScript/Interpreter/Instruccion/Declaracion');
	const {Asignacion} = require('../TypeScript/Interpreter/Instruccion/Asignacion');
	const {For} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/For');
	const {ForIn} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/ForIn');
	const {ForOf} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/ForOf');

	const {Switch} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Switch');
	const {Case} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Case');
	const {Default} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Default');

	const {ArrayTS} = require('../TypeScript/Interpreter/Edd/ArrayTS');
	const {TypeTS} = require('../TypeScript/Interpreter/Edd/TypeTS');
	const {TypeTSDefinicion} = require('../TypeScript/Interpreter/Edd/TypeTSDefinicion');
	
	const {Log} = require('../TypeScript/Interpreter/FuncionesNativas/Log');
	const {Push} = require('../TypeScript/Interpreter/FuncionesNativas/Push');
	const {Pop} = require('../TypeScript/Interpreter/FuncionesNativas/Pop');
	const {Incremento} = require('../TypeScript/Interpreter/FuncionesNativas/Incremento');
	const {Decremento} = require('../TypeScript/Interpreter/FuncionesNativas/Decremento');

	const {Manager} = require('../TypeScript/Interpreter/Reportes/Manager');
	const {NodoError,TipoError} = require('../TypeScript/Interpreter/Reportes/NodoError');

	const {Type} = require('../TypeScript/Interpreter/TablaSimbolos/Tipo');

	const {Return} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Return');
	const {Break} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Break');
	const {Continue} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Continue');
    */
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 62;
break;
case 4:return 45;
break;
case 5:return 47;
break;
case 6:return 95;
break;
case 7:return 96;
break;
case 8:return 97; 
break;
case 9:return 81; 
break;
case 10:return 82;
break;
case 11:return 83;
break;
case 12:return 84;
break;
case 13:return 31;
break;
case 14:return 65;
break;
case 15:return 39;
break;
case 16:return 43;
break;
case 17:return 53;
break;
case 18:return 57;
break;
case 19:return 59;
break;
case 20:return 60;
break;
case 21:return 61;
break;
case 22:return 44;
break;
case 23:return 46;
break;
case 24:return 48;
break;
case 25:return 51;
break;
case 26:return 52;
break;
case 27:return 35; 
break;
case 28:return 31;
break;
case 29:return 76;
break;
case 30:return 75;
break;
case 31:return 37;
break;
case 32:return 99;
break;
case 33:return 38; 
break;
case 34:return 98; 
break;
case 35:return 102; 
break;
case 36:return 100;
break;
case 37:return 101;
break;
case 38:return 103; 
break;
case 39:return 104;
break;
case 40:return 105;
break;
case 41:return 107; 
break;
case 42:return 106;
break;
case 43:return 109; 
break;
case 44:return 108;
break;
case 45:return 74;
break;
case 46:return 73;
break;
case 47:return 'dospuntosigual';
break;
case 48:return 58;
break;
case 49:return 30;
break;
case 50:return 79;
break;
case 51:return 80;
break;
case 52:return 40;
break;
case 53:return 41;
break;
case 54:return 8;
break;
case 55:return 9;
break;
case 56:return 33;
break;
case 57:return 88;
break;
case 58:return 110;
break;
case 59:return 111;
break;
case 60:return 112;
break;
case 61: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad1 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad1 = cad1.replace(/\\/g,"\\");
                            cad1 = cad1.replace(/\\n/g,"\n");
                            cad1 = cad1.replace(/\\r/g,"\r");
                            cad1 = cad1.replace(/\\t/g,"\t");
							yy_.yytext = cad1;
						return 92; 
break;
case 62: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad2 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad2 = cad2.replace(/\\/g,"\\");
                            cad2 = cad2.replace(/\\n/g,"\n");
                            cad2 = cad2.replace(/\\r/g,"\r");
                            cad2 = cad2.replace(/\\t/g,"\t");
							yy_.yytext = cad2;
						return 93; 
break;
case 63: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad3 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad3 = cad3.replace(/\\/g,"\\");
                            cad3 = cad3.replace(/\\n/g,"\n");
                            cad3 = cad3.replace(/\\r/g,"\r");
                            cad3 = cad3.replace(/\\t/g,"\t");
							yy_.yytext = cad3;
						return 94; 
break;
case 64:return 91;
break;
case 65:return 90;
break;
case 66:return 32;
break;
case 67:return 5; 
break;
case 68: 	Manager.getManager().addError(new NodoError(TipoError.LEXICO, `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column,"global"));
							//er.addError(new NodoError.NodoError(NodoError.TipoError.LEXICO, `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column, "this.archivo"));
    						//console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:console\.log\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:type\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:\.)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:"[^\"]*")/,/^(?:[\'][^\']*[\'])/,/^(?:[\`][^\`]*[\`])/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = InterpreteGrammar;
exports.Parser = InterpreteGrammar.Parser;
exports.parse = function () { return InterpreteGrammar.parse.apply(InterpreteGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}