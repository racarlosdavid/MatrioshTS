/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var InterpreteGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,27],$V2=[1,25],$V3=[1,34],$V4=[1,26],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,22],$Vc=[1,21],$Vd=[1,23],$Ve=[1,24],$Vf=[2,5,9,27,28,31,35,40,43,44,45,49,51,52,53,54,56,65,66],$Vg=[1,48],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,50],$Vl=[1,49],$Vm=[1,56],$Vn=[1,68],$Vo=[1,66],$Vp=[1,65],$Vq=[1,67],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[2,57],$VC=[1,83],$VD=[2,5,9,27,28,31,35,37,40,43,44,45,49,51,52,53,54,56,65,66],$VE=[9,26,28,29,37,50,63,68,69,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104],$VF=[1,107],$VG=[1,109],$VH=[1,108],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[1,117],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[1,121],$VU=[9,26,37,50,63,69,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$VV=[1,129],$VW=[1,136],$VX=[1,138],$VY=[37,63,69],$VZ=[1,141],$V_=[1,147],$V$=[1,143],$V01=[1,144],$V11=[1,145],$V21=[1,146],$V31=[8,28,36,68,79,80,81,82,83,84,85,86,87,101],$V41=[2,5,9,27,28,31,35,39,40,43,44,45,49,51,52,53,54,56,65,66],$V51=[9,63],$V61=[37,63],$V71=[1,195],$V81=[8,9,26,28,29,37,63,68],$V91=[2,5,8,9,27,28,31,35,36,40,43,44,45,49,51,52,53,54,56,65,66,68,79,80,81,82,83,84,85,86,87,101],$Va1=[2,5,8,9,27,28,31,35,36,37,40,43,44,45,49,51,52,53,54,56,65,66,68,79,80,81,82,83,84,85,86,87,101],$Vb1=[9,26,37,50,63,69,77,87,88,93,94,95,96,97,98,99,100],$Vc1=[9,26,37,50,63,69,77,87,88,89,90,93,94,95,96,97,98,99,100],$Vd1=[9,26,37,50,63,69,77,93,94,99,100],$Ve1=[9,26,37,50,63,69,77,93,94,95,96,97,98,99,100],$Vf1=[9,26,28,29,37,63,68],$Vg1=[9,28],$Vh1=[2,62],$Vi1=[1,229],$Vj1=[1,228],$Vk1=[1,238],$Vl1=[9,26,28,37,63],$Vm1=[9,49,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"BLOQUE":7,"llaveizq":8,"llaveder":9,"FUNCION":10,"CONSOLELOG":11,"DECLARACION":12,"ASIGNACION":13,"IF":14,"TYPES":15,"FOR":16,"WHILE":17,"DOWHILE":18,"SWITCH":19,"BREAK":20,"CONTINUE":21,"RETURN":22,"INC":23,"DEC":24,"LLAMADA":25,"ptcoma":26,"pr_type":27,"identificador":28,"igual":29,"TYPE_L_PARAM":30,"pr_return":31,"E":32,"inc":33,"dec":34,"pr_if":35,"parizq":36,"parder":37,"ELSE":38,"pr_else":39,"pr_for":40,"FOR_D":41,"FOR_A":42,"pr_while":43,"pr_do":44,"pr_switch":45,"L_CASE":46,"DEFAULT":47,"CASE":48,"pr_case":49,"dospuntos":50,"pr_default":51,"pr_break":52,"pr_continue":53,"pr_consolelog":54,"L_E":55,"pr_function":56,"F":57,"L_PARAMETROS":58,"T":59,"TIPO":60,"PARAMETRO":61,"SEPARADOR":62,"coma":63,"DIMENSIONES":64,"pr_const":65,"pr_let":66,"L_ACCESO":67,"corizq":68,"corder":69,"pr_number":70,"pr_string":71,"pr_boolean":72,"pr_void":73,"ARITMETICA":74,"RELACIONAL":75,"LOGICA":76,"pregunta":77,"L_E_TYPE":78,"entero":79,"decimal":80,"string1":81,"string2":82,"string3":83,"pr_true":84,"pr_false":85,"pr_null":86,"menos":87,"mas":88,"por":89,"div":90,"pot":91,"mod":92,"igualque":93,"diferente":94,"mayorque":95,"mayorigual":96,"menorque":97,"menorigual":98,"and":99,"or":100,"not":101,"E_TYPE":102,"ACCESO":103,"punto":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"llaveizq",9:"llaveder",26:"ptcoma",27:"pr_type",28:"identificador",29:"igual",31:"pr_return",33:"inc",34:"dec",35:"pr_if",36:"parizq",37:"parder",39:"pr_else",40:"pr_for",43:"pr_while",44:"pr_do",45:"pr_switch",49:"pr_case",50:"dospuntos",51:"pr_default",52:"pr_break",53:"pr_continue",54:"pr_consolelog",56:"pr_function",63:"coma",65:"pr_const",66:"pr_let",68:"corizq",69:"corder",70:"pr_number",71:"pr_string",72:"pr_boolean",73:"pr_void",77:"pregunta",79:"entero",80:"decimal",81:"string1",82:"string2",83:"string3",84:"pr_true",85:"pr_false",86:"pr_null",87:"menos",88:"mas",89:"por",90:"div",91:"pot",92:"mod",93:"igualque",94:"diferente",95:"mayorque",96:"mayorigual",97:"menorque",98:"menorigual",99:"and",100:"or",101:"not",104:"punto"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[15,7],[15,6],[22,3],[22,2],[23,3],[23,2],[24,3],[24,2],[14,5],[14,6],[38,2],[38,2],[16,8],[41,1],[41,1],[42,1],[42,1],[42,1],[17,5],[18,6],[18,7],[19,8],[19,7],[46,2],[46,1],[48,4],[47,3],[20,2],[21,2],[11,5],[10,4],[57,6],[57,5],[59,2],[59,0],[30,3],[30,2],[62,1],[62,1],[62,0],[58,3],[58,1],[61,3],[61,4],[25,4],[25,3],[25,5],[25,4],[12,6],[12,7],[12,6],[12,7],[12,4],[12,5],[13,5],[13,4],[64,3],[64,2],[60,1],[60,1],[60,1],[60,1],[60,1],[32,1],[32,1],[32,1],[32,3],[32,5],[32,1],[32,2],[32,3],[32,4],[32,3],[32,2],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[74,2],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[76,3],[76,3],[76,2],[55,3],[55,1],[78,3],[78,1],[102,3],[67,2],[67,1],[103,3],[103,4],[103,2],[103,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Fin Jison"); this.$ = new AST($$[$0-1]);  return this.$;  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 47: case 64: case 123: case 125: case 128:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); /*this.$ = $$[$0-1];*/ 
break;
case 5:
 this.$ = new Bloque([], _$[$0-1].first_line, _$[$0-1].first_column); /*this.$ = [];*/ 
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 34: case 36: case 37: case 38: case 39: case 40: case 53: case 56: case 86: case 87: case 88:
 this.$ = $$[$0]; 
break;
case 22:
	Console.log(` Error Sintactico se recupero con ${yytext} en la posicion`,_$[$0-1].last_line,_$[$0-1].last_column); 
					//Para reportar el error compilar el archivo jison y en el .js buscar -> if (!recovering) { y pegar el codigo hasta de ultimo de ese if
					//Manager.getManager().addError(new NodoError(TipoError.SINTACTICO, `El caracter ${(this.terminals_[symbol] || symbol)} no se esperaba en esta posicion`, yyloc.last_line, yyloc.last_column));
                
break;
case 23:
 this.$ = new TypeTS($$[$0-5],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 24:
 this.$ = new TypeTS($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 25:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 26:
 this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 27:
  this.$ = new Incremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 28:
  this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 29:
  this.$ = new Decremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 30:
  this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 31:
 this.$ = new If($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 32:
 this.$ = new IfElse($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 33:
 this.$ = new Else($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 35:
 this.$ = new For($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 41:
 this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 42:
 this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 43:
 this.$ = new DoWhile($$[$0-5],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 44:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 45:
 this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 46: case 127:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1] 
break;
case 48:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 49:
 this.$ = new Default($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 50:
 this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 51:
 this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 52:
 this.$ = new Log($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 54:
 
		var s =  eval('$$');
		var identificador = s[s.length - 8]; /*s[s.length - 7];*/
		for(instr of $$[$0-1]){/*for(instr of $$[$0-1].instrucciones){*/
			try{
				if(instr instanceof Funcion){
					instr.padre = identificador; //Le paso el id del padre al hijo
				}
			}catch(e){
				console.log("Error al pasar el id del padre al hijo"+e);
			}
		}
		this.$ = new Funcion(identificador,null,$$[$0-5],$$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 55:
 
		var s =  eval('$$');
		var identificador = s[s.length - 7]; /*s[s.length - 6];*/
		for(instr of $$[$0-1]){/*for(instr of $$[$0-1].instrucciones){*/
			try{
				if(instr instanceof Funcion){
					instr.padre = identificador; //Le paso el id del padre al hijo
				}
			}catch(e){
				console.log("Error al pasar el id del padre al hijo"+e);
			}
		}
		this.$ = new Funcion(identificador,null,[],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);  
	
break;
case 57:
 this.$ = null;
break;
case 58:
 $$[$0-2].push($$[$0-1]); this.$=$$[$0-2]; 
break;
case 59:
 this.$ = [$$[$0-1]]; 
break;
case 63: case 122: case 124:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 65:
 this.$ = new Declaracion(TipoDeclaracion.PARAM,$$[$0-2],$$[$0],0,null,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 66:
 this.$ = new Declaracion(TipoDeclaracion.PARAM,$$[$0-3],$$[$0-1],$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 67:
 this.$ = new Llamada($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 68: case 93: case 129:
 this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 69:
 this.$ = new Llamada($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 70: case 94: case 130:
 this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 71:
 this.$ = new Declaracion(TipoDeclaracion.CONST,$$[$0-4],$$[$0-3],0,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 72:
 this.$ = new Declaracion(TipoDeclaracion.CONST,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 73:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-4],$$[$0-3],0,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 74:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 75:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-2],$$[$0-1],0,null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 76:
 this.$ = new Declaracion(TipoDeclaracion.LET,$$[$0-3],$$[$0-2],$$[$0-1],null,_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 77:
 this.$ = new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 78:
 this.$ = new Asignacion($$[$0-3],[],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 79:
 $$[$0-2] = $$[$0-2]+1; this.$=$$[$0-2] 
break;
case 80:
 this.$ = 1; 
break;
case 81:
 this.$ = Type.NUMBER; 
break;
case 82:
 this.$ = Type.STRING; 
break;
case 83:
 this.$ = Type.BOOLEAN; 
break;
case 84:
 this.$ = Type.VOID; 
break;
case 85:
 this.$ = yytext; 
break;
case 89: case 132:
 this.$ = $$[$0-1]; 
break;
case 90:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 91:
 this.$ = new Id($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 92:
 this.$ = new Acceso($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 95:
 this.$ = new ArrayTS($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 96:
 this.$ = new ArrayTS([],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 97:
 this.$ = new TypeTSDefinicion($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 98: case 99:
 this.$ = new Literal(Number(yytext),Type.NUMBER,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 100:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING1,_$[$0].first_line,_$[$0].first_column); 
break;
case 101:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING2,_$[$0].first_line,_$[$0].first_column); 
break;
case 102:
 this.$ = new Literal(String(yytext),Type.STRING,TipoString.STRING3,_$[$0].first_line,_$[$0].first_column); 
break;
case 103:
 this.$ = new Literal(Boolean(true),Type.BOOLEAN,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 104:
 this.$ = new Literal(Boolean(false),Type.BOOLEAN,TipoString.INDEF,_$[$0].first_line,_$[$0].first_column); 
break;
case 105:
 this.$ = new Null(_$[$0].first_line,_$[$0].first_column); 
break;
case 106:
 this.$ = new Aritmetica(TipoOperacionAritmetica.NEGACION,null,null,$$[$0],true,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 107:
 this.$ = new Aritmetica(TipoOperacionAritmetica.SUMA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 108:
 this.$ = new Aritmetica(TipoOperacionAritmetica.RESTA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 109:
 this.$ = new Aritmetica(TipoOperacionAritmetica.MULTIPLICACION,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 110:
 this.$ = new Aritmetica(TipoOperacionAritmetica.DIVISION,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 111:
 this.$ = new Aritmetica(TipoOperacionAritmetica.POTENCIA,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 112:
 this.$ = new Aritmetica(TipoOperacionAritmetica.MODULO,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 113:
 this.$ = new Relacional(TipoOperacionRelacional.IGUALQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 114:
 this.$ = new Relacional(TipoOperacionRelacional.DIFERENTE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 115:
 this.$ = new Relacional(TipoOperacionRelacional.MAYORQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 116:
 this.$ = new Relacional(TipoOperacionRelacional.MAYORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 117:
 this.$ = new Relacional(TipoOperacionRelacional.MENORQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 118:
 this.$ = new Relacional(TipoOperacionRelacional.MENORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 119:
 this.$ = new Logica(TipoOperacionLogica.AND,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 120:
 this.$ = new Logica(TipoOperacionLogica.OR,$$[$0-2],$$[$0],null,false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 121:
 this.$ = new Logica(TipoOperacionLogica.NOT,null,null,$$[$0],true,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 126:
 this.$ = new Declaracion(TipoDeclaracion.TYPEVAL,$$[$0-2],null,0,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 131:
 this.$ = new Id($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},{1:[3]},{2:$V0,5:[1,35],6:36,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},o($Vf,[2,3]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),{26:[1,37]},{28:[1,38]},{36:[1,39]},{28:[1,40]},{28:[1,41]},{28:$Vg,29:$Vh,33:$Vi,34:$Vj,36:[1,46],67:42,68:$Vk,103:47,104:$Vl},{36:[1,51]},{28:[1,52]},{36:[1,53]},{36:[1,54]},{7:55,8:$Vm},{36:[1,57]},{26:[1,58]},{26:[1,59]},{8:$Vn,26:[1,61],28:$Vo,32:60,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,22]),{36:[1,79]},{8:$Vn,28:$Vo,32:81,36:$Vp,55:80,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o([29,68],$VB,{59:82,50:$VC}),o([26,29,68],$VB,{59:84,50:$VC}),{28:$Vg,29:[1,85],68:$Vk,103:86,104:$Vl},{8:$Vn,28:$Vo,32:87,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($VD,[2,28],{26:[1,88]}),o($VD,[2,30],{26:[1,89]}),{8:$Vn,28:$Vo,32:81,36:$Vp,37:[1,90],55:91,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($VE,[2,128]),{36:[1,92]},{28:[1,93]},{8:$Vn,28:$Vo,32:94,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:95,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{29:[1,96]},{12:98,13:99,28:[1,100],41:97,65:$Vd,66:$Ve},{8:$Vn,28:$Vo,32:101,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{43:[1,102]},{2:$V0,4:103,6:3,9:[1,104],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},{8:$Vn,28:$Vo,32:105,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($Vf,[2,50]),o($Vf,[2,51]),{26:[1,106],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($Vf,[2,26]),o($VU,[2,86]),o($VU,[2,87]),o($VU,[2,88]),{8:$Vn,28:$Vo,32:122,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($VU,[2,91],{103:47,67:123,28:$Vg,36:[1,124],68:$Vk,104:$Vl}),{8:$Vn,28:$Vo,32:81,36:$Vp,55:125,68:$Vq,69:[1,126],74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{28:$VV,78:127,102:128},o($VU,[2,98]),o($VU,[2,99]),o($VU,[2,100]),o($VU,[2,101]),o($VU,[2,102]),o($VU,[2,103]),o($VU,[2,104]),o($VU,[2,105]),{8:$Vn,28:$Vo,32:130,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:131,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{28:$VW,37:[1,134],57:132,58:133,61:135},{37:[1,137],63:$VX},o($VY,[2,123],{77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),{29:[1,139],64:140,68:$VZ},{28:$V_,60:142,70:$V$,71:$V01,72:$V11,73:$V21},{26:[1,150],29:[1,148],64:149,68:$VZ},{8:$Vn,28:$Vo,32:151,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($VE,[2,127]),{26:[1,152],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($VD,[2,27]),o($VD,[2,29]),o($Vf,[2,68],{26:[1,153]}),{37:[1,154],63:$VX},{8:$Vn,28:$Vo,32:81,36:$Vp,37:[1,155],55:156,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($VE,[2,131]),{69:[1,157],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{37:[1,158],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{8:[1,159]},{8:$Vn,28:$Vo,32:160,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($V31,[2,36]),o($V31,[2,37]),{28:$Vg,29:$Vh,67:42,68:$Vk,103:47,104:$Vl},{37:[1,161],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{36:[1,162]},{2:$V0,6:36,9:[1,163],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},o($V41,[2,5]),{37:[1,164],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($Vf,[2,25]),{8:$Vn,28:$Vo,32:165,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:166,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:167,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:168,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:169,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:170,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:171,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:172,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:173,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:174,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:175,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:176,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:177,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:178,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:179,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{37:[1,180],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($VU,[2,92],{103:86,28:$Vg,68:$Vk,104:$Vl}),{8:$Vn,28:$Vo,32:81,36:$Vp,37:[1,181],55:182,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{63:$VX,69:[1,183]},o($VU,[2,96]),{9:[1,184],63:[1,185]},o($V51,[2,125]),{50:[1,186]},o($VU,[2,106]),o($VU,[2,121]),o($Vf,[2,53]),{37:[1,187],63:[1,188]},{8:$VB,50:$VC,59:189},o($V61,[2,64]),{50:[1,190]},{26:[1,191]},{8:$Vn,28:$Vo,32:192,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$Vn,28:$Vo,32:193,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{29:[1,194],68:$V71},{69:[1,196]},o([8,26,29,68],[2,56]),o($V81,[2,81]),o($V81,[2,82]),o($V81,[2,83]),o($V81,[2,84]),o($V81,[2,85]),{8:$Vn,28:$Vo,32:197,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{26:[1,199],29:[1,198],68:$V71},o($V91,[2,75]),{26:[1,200],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($Va1,[2,78]),o($Vf,[2,67]),o($Vf,[2,70],{26:[1,201]}),o($VE,[2,129]),{37:[1,202],63:$VX},o($VE,[2,132]),{7:203,8:$Vm},{28:$VW,30:204,61:205},{26:[1,206],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{7:207,8:$Vm},{8:$Vn,28:$Vo,32:208,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($V41,[2,4]),{8:[1,209]},{50:[1,210],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($Vb1,[2,107],{89:$VI,90:$VJ,91:$VK,92:$VL}),o($Vb1,[2,108],{89:$VI,90:$VJ,91:$VK,92:$VL}),o($Vc1,[2,109],{91:$VK,92:$VL}),o($Vc1,[2,110],{91:$VK,92:$VL}),o($VU,[2,111]),o($VU,[2,112]),o($Vd1,[2,113],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,95:$VO,96:$VP,97:$VQ,98:$VR}),o($Vd1,[2,114],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,95:$VO,96:$VP,97:$VQ,98:$VR}),o($Ve1,[2,115],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL}),o($Ve1,[2,116],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL}),o($Ve1,[2,117],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL}),o($Ve1,[2,118],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL}),o([9,26,37,50,63,69,77,99,100],[2,119],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR}),o([9,26,37,50,63,69,77,100],[2,120],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),o($VU,[2,89]),o($VU,[2,93]),{37:[1,211],63:$VX},o($VU,[2,95]),o($VU,[2,97]),{28:$VV,102:212},{8:$Vn,28:$Vo,32:213,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{8:$VB,50:$VC,59:214},{28:$VW,61:215},{8:[1,216]},{28:$V_,60:217,70:$V$,71:$V01,72:$V11,73:$V21},o($Vf,[2,52]),o($VY,[2,122],{77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),{26:[1,218],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{8:$Vn,28:$Vo,32:219,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},{69:[1,220]},o($Vf1,[2,80]),{26:[1,221],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{8:$Vn,28:$Vo,32:222,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($V91,[2,76]),o($Va1,[2,77]),o($Vf,[2,69]),o($VE,[2,130]),o($Vf,[2,31],{38:223,39:[1,224]}),{9:[1,225],28:$VW,61:226},o($Vg1,$Vh1,{62:227,26:$Vi1,63:$Vj1}),{13:233,23:231,24:232,28:[1,234],42:230},o($Vf,[2,41]),{37:[1,235],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{46:236,48:237,49:$Vk1},{8:$Vn,28:$Vo,32:239,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o($VU,[2,94]),o($V51,[2,124]),o($V51,[2,126],{77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),{8:[1,240]},o($V61,[2,63]),{2:$V0,4:241,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},o($Vl1,[2,65],{64:242,68:$VZ}),o($V91,[2,71]),{26:[1,243],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($Vf1,[2,79]),o($V91,[2,73]),{26:[1,244],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($Vf,[2,32]),{7:245,8:$Vm,14:246,35:$V4},o($Vf,[2,24],{26:[1,247]}),o($Vg1,$Vh1,{62:248,26:$Vi1,63:$Vj1}),o($Vg1,[2,59]),o($Vg1,[2,60]),o($Vg1,[2,61]),{37:[1,249]},{37:[2,38]},{37:[2,39]},{37:[2,40]},{28:$Vg,29:$Vh,33:$Vi,34:$Vj,67:42,68:$Vk,103:47,104:$Vl},o($Vf,[2,42],{26:[1,250]}),{9:[1,252],47:251,48:253,49:$Vk1,51:[1,254]},o($Vm1,[2,47]),{8:$Vn,28:$Vo,32:255,36:$Vp,68:$Vq,74:62,75:63,76:64,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,101:$VA},o([9,26,37,50,63,69,77],[2,90],{87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),{2:$V0,4:256,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},{2:$V0,6:36,9:[1,257],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},o($Vl1,[2,66],{68:$V71}),o($V91,[2,72]),o($V91,[2,74]),o($Vf,[2,33]),o($Vf,[2,34]),o($Vf,[2,23]),o($Vg1,[2,58]),{7:258,8:$Vm},o($Vf,[2,43]),{9:[1,259]},o($Vf,[2,45]),o($Vm1,[2,46]),{50:[1,260]},{50:[1,261],77:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{2:$V0,6:36,9:[1,262],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},o($Vf,[2,55]),o($Vf,[2,35]),o($Vf,[2,44]),{2:$V0,4:263,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},{2:$V0,4:264,6:3,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},o($Vf,[2,54]),{2:$V0,6:36,9:[2,49],10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve},o($Vm1,[2,48],{10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,6:36,2:$V0,27:$V1,28:$V2,31:$V3,35:$V4,40:$V5,43:$V6,44:$V7,45:$V8,52:$V9,53:$Va,54:$Vb,56:$Vc,65:$Vd,66:$Ve})],
defaultActions: {35:[2,1],231:[2,38],232:[2,39],233:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
	
	const {AST} = require('../TypeScript/Interpreter/Abstract/AST');

	const {Acceso,TipoAcceso} = require('../TypeScript/Interpreter/Expresion/Acceso');
	const {Aritmetica,TipoOperacionAritmetica} = require('../TypeScript/Interpreter/Expresion/Aritmetica');
	const {Relacional,TipoOperacionRelacional} = require('../TypeScript/Interpreter/Expresion/Relacional');
	const {Logica,TipoOperacionLogica} = require('../TypeScript/Interpreter/Expresion/Logica');
	const {Literal,TipoString} = require('../TypeScript/Interpreter/Expresion/Literal');
	const {Id} = require('../TypeScript/Interpreter/Expresion/Id');
	const {Ternario} = require('../TypeScript/Interpreter/Expresion/Ternario');
	const {Null} = require('../TypeScript/Interpreter/Expresion/Null');

	const {Bloque} = require('../TypeScript/Interpreter/Instruccion/Bloque');
	const {Funcion} = require('../TypeScript/Interpreter/Instruccion/Funcion');
	const {Llamada} = require('../TypeScript/Interpreter/Instruccion/Llamada');
	//const {If_Old,TipoIf} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/If_Old');
	const {If} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/If');
	const {IfElse} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/IfElse');
	const {Else} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Else');
	const {While} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/While');
	const {DoWhile} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/DoWhile');
	const {Declaracion,TipoDeclaracion} = require('../TypeScript/Interpreter/Instruccion/Declaracion');
	const {Asignacion} = require('../TypeScript/Interpreter/Instruccion/Asignacion');
	const {For} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/For');

	const {Switch} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Switch');
	const {Case} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Case');
	const {Default} = require('../TypeScript/Interpreter/Instruccion/SentenciasControlFlujo/Default');

	const {ArrayTS} = require('../TypeScript/Interpreter/Edd/ArrayTS');
	const {TypeTS} = require('../TypeScript/Interpreter/Edd/TypeTS');
	const {TypeTSDefinicion} = require('../TypeScript/Interpreter/Edd/TypeTSDefinicion');
	
	const {Log} = require('../TypeScript/Interpreter/FuncionesNativas/Log');
	const {Incremento} = require('../TypeScript/Interpreter/FuncionesNativas/Incremento');
	const {Decremento} = require('../TypeScript/Interpreter/FuncionesNativas/Decremento');

	const {Manager} = require('../TypeScript/Interpreter/Reportes/Manager');
	const {NodoError,TipoError} = require('../TypeScript/Interpreter/Reportes/NodoError');

	const {Type} = require('../TypeScript/Interpreter/TablaSimbolos/Tipo');

	const {Return} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Return');
	const {Break} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Break');
	const {Continue} = require('../TypeScript/Interpreter/Instruccion/SentenciasTransferencia/Continue');

    /*	
	const LlamadaE = require('../JavaScript/Expresion/LlamadaE');
	const Acceso = require('../JavaScript/Expresion/Acceso');
	
	const LlamadaI = require('../JavaScript/Instruccion/LlamadaI');
    */

	//Manager.Manager.getManager().reiniciar(); 
	//Manager.Manager.getManager().agregarC3D("hola mundo");
	//const ErrorManager = require('../JavaScript/Reportes/ErrorManager');
    //let er = new ErrorManager.ErrorManager(); 
	//er.addError(new NodoError.NodoError(NodoError.TipoError.SEMANTICO, `No es posible la suma entre los tipos ${1} y ${1}`, 1, 1, "this.archivo"));
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 54;
break;
case 4:return 66;
break;
case 5:return 65;
break;
case 6:return 84;
break;
case 7:return 85;
break;
case 8:return 86; 
break;
case 9:return 70; 
break;
case 10:return 71;
break;
case 11:return 72;
break;
case 12:return 73;
break;
case 13:return 27;
break;
case 14:return 56;
break;
case 15:return 35;
break;
case 16:return 39;
break;
case 17:return 45;
break;
case 18:return 49;
break;
case 19:return 51;
break;
case 20:return 52;
break;
case 21:return 53;
break;
case 22:return 40;
break;
case 23:return 43;
break;
case 24:return 44;
break;
case 25:return 31; 
break;
case 26:return 27;
break;
case 27:return 33;
break;
case 28:return 88;
break;
case 29:return 34; 
break;
case 30:return 87; 
break;
case 31:return 91; 
break;
case 32:return 89;
break;
case 33:return 90;
break;
case 34:return 92; 
break;
case 35:return 93;
break;
case 36:return 94;
break;
case 37:return 96; 
break;
case 38:return 95;
break;
case 39:return 98; 
break;
case 40:return 97;
break;
case 41:return 104;
break;
case 42:return 63;
break;
case 43:return 'dospuntosigual';
break;
case 44:return 50;
break;
case 45:return 26;
break;
case 46:return 68;
break;
case 47:return 69;
break;
case 48:return 36;
break;
case 49:return 37;
break;
case 50:return 8;
break;
case 51:return 9;
break;
case 52:return 29;
break;
case 53:return 77;
break;
case 54:return 99;
break;
case 55:return 100;
break;
case 56:return 101;
break;
case 57: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad1 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad1 = cad1.replace(/\\/g,"\\");
                            cad1 = cad1.replace(/\\n/g,"\n");
                            cad1 = cad1.replace(/\\r/g,"\r");
                            cad1 = cad1.replace(/\\t/g,"\t");
							yy_.yytext = cad1;
						return 81; 
break;
case 58: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad2 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad2 = cad2.replace(/\\/g,"\\");
                            cad2 = cad2.replace(/\\n/g,"\n");
                            cad2 = cad2.replace(/\\r/g,"\r");
                            cad2 = cad2.replace(/\\t/g,"\t");
							yy_.yytext = cad2;
						return 82; 
break;
case 59: //yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
						 let cad3 = yy_.yytext.substr(1,yy_.yyleng-2);
                            cad3 = cad3.replace(/\\/g,"\\");
                            cad3 = cad3.replace(/\\n/g,"\n");
                            cad3 = cad3.replace(/\\r/g,"\r");
                            cad3 = cad3.replace(/\\t/g,"\t");
							yy_.yytext = cad3;
						return 83; 
break;
case 60:return 80;
break;
case 61:return 79;
break;
case 62:return 28;
break;
case 63:return 5; 
break;
case 64: 	Manager.getManager().addError(new NodoError(TipoError.LEXICO, `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column));
							//er.addError(new NodoError.NodoError(NodoError.TipoError.LEXICO, `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column, "this.archivo"));
    						//console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:console\.log\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:type\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:\.)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:"[^\"]*")/,/^(?:[\'][^\']*[\'])/,/^(?:[\`][^\`]*[\`])/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = InterpreteGrammar;
exports.Parser = InterpreteGrammar.Parser;
exports.parse = function () { return InterpreteGrammar.parse.apply(InterpreteGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}